{
  "name": "kloudless",
  "version": "0.0.1",
  "author": {
    "name": "Kloudless"
  },
  "description": "Simple Node interface to the Kloudless API.",
  "contributors": [
    {
      "name": "Jackson Broussard",
      "email": "jackson@kloudless.com"
    },
    {
      "name": "Leo Zhang",
      "email": "leo@kloudless.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/kloudless/kloudless-node.git"
  },
  "main": "./lib/kloudless",
  "dependencies": {
    "async": ">=0.6.2",
    "form-data": ">=0.1.2",
    "request": "~2.42.0",
    "bluebird": "~2.3.2",
    "streamifier": "~0.1.0"
  },
  "devDependencies": {
    "nodeunit": ">=0.8.6",
    "express": "*",
    "morgan": "*",
    "jade": "*"
  },
  "licenses": [
    {
      "type": "MIT License",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "# Kloudless Node API\r\n\r\n## Installation\r\n```\r\nnpm install git://github.com/Kloudless/kloudless-node\r\n```\r\n\r\n## Node-specific docs and examples\r\n\r\nREST API docs available here: https://developers.kloudless.com/docs\r\n\r\nAPI methods are called in the scheme of...\r\n```\r\nkloudless.<resource>.<method>(<data-json>, <callback>);\r\n```\r\n\r\nWe'll start with a couple of examples:\r\n\r\n```javascript\r\nvar async = require('async'); // for clean demonstration\r\n\r\nvar kloudless = require('kloudless')('your-api-key-here');\r\nvar fs = require('fs');\r\n\r\nvar accountId, fileId;\r\n\r\nasync.series([\r\n  function(cb) {\r\n    // to get the base account data\r\n    kloudless.accounts.base({}, function(err, res) {\r\n      if (err) {\r\n        return console.log(\"Error getting the account data: \" + err);\r\n      }\r\n      // assuming you authorized at least one service (Dropbox, Google Drive, etc.)\r\n      console.log(\"We got the account data!\");\r\n      accountId = res[\"objects\"][0][\"id\"];\r\n      cb();\r\n    });\r\n  },\r\n\r\n  function(cb) {\r\n    // create the fs.ReadStream to pass in to files.upload()\r\n    var filestream = fs.createReadStream('./test.txt');\r\n\r\n    // to upload a file to the account we just got data for\r\n    kloudless.files.upload({\r\n      \"name\": \"test.txt\",\r\n      \"account_id\": accountId,\r\n      \"parent_id\": \"root\",\r\n      \"file\": filestream,\r\n      // all API calls can specify URL query parameters by defining \"queryParams\"\r\n      \"queryParams\": {\r\n        \"overwrite\": \"true\"\r\n      }\r\n    }, function(err, res) {\r\n      if (err) {\r\n        console.log(\"Error uploading file: \" + err);\r\n        return cb(err);\r\n      }\r\n      console.log(\"We uploaded the file!\");\r\n      fileId = res['id'];\r\n      cb();\r\n    });\r\n  },\r\n\r\n  function(cb){\r\n    // and now we're going to download that file we just uploaded\r\n    kloudless.files.contents({\r\n      \"account_id\": accountId,\r\n      \"file_id\": fileId\r\n    }, function(err, filestream) {\r\n      if (err) {\r\n        return console.log(\"Files contents: \" + err);\r\n      }\r\n      var filecontents = '';\r\n      console.log(\"got the filestream:\");\r\n      filestream.on('data', function(chunk) {\r\n        console.log(\"reading in data chunk...\");\r\n        console.log(chunk);\r\n        filecontents += chunk;\r\n      });\r\n      filestream.on('end',function() {\r\n        console.log(\"finished reading file!\");\r\n        console.log(filecontents);\r\n        cb();\r\n      });\r\n    });\r\n  }\r\n]);\r\n```\r\n\r\n## Resources and Methods\r\n\r\n**All API calls can specify URL query parameters by defining \"queryParams\".**\r\n_See file upload example above._\r\n***\r\n\r\n### accounts.base()\r\n**_No required parameters for accounts.base()_**\r\n***\r\n### accounts.get()\r\n**Required params:** ```account_id```\r\n***\r\n### accounts.delete()\r\n**Required params:** ```account_id```\r\n***\r\n\r\n### files.upload()\r\n**Required params:** ```account_id, parent_id, file, name```\r\n\"file\" should be an instance of Buffer.\r\nYou can create a Buffer like this: ```var your_var_name = new Buffer(\"the file contents go here\")```\r\n\"name\" should be the name of the file after it's uploaded.\r\n***\r\n### files.uploadMultipart()\r\n**Parameters:** `options`\r\n\r\n`options` is an options object with keys:\r\n* `account_id` -- the ID of the account you're uploading to (i.e. the account which owns the S3/Azure bucket)\r\n* `parent_id` -- the ID of the folder you're uploading the file to\r\n* `file` -- a `Buffer` or `ReadStream` of the file being uploaded\r\n* `name` -- the name of the file after it's uploaded\r\n* `overwrite` -- (optional) a boolean to overwrite a file with the same name\r\n* `max_connections` -- (optional) the maximum number of concurrent connections, defaults to 5\r\n* `max_retries` -- (optional) the maximum number of times a dropped connection is retried, defaults to 3\r\n\r\nThis method returns a `MultipartUpload extends EventEmitter` that emits the following events:\r\n* `start(session_id)` -- fired after the initialisation completes and file transfer begins, passing the multipart session ID\r\n* `progress(completion)` -- fired after every successful chunk transfer, passing a completion state\r\n* `complete` -- fired after a transfer is finished, regardless of whether it succeeds. Fires after success state events\r\n* `success(result)` -- fires after a transfer completes successfully, passing the metadata of the newly uploaded file\r\n* `error(err, completion)` -- fires after a transfer encounters a fatal error, passing the error and a completion state\r\n* `abort` -- fires after a transfer is aborted\r\n\r\nCompletion states are objects with keys:\r\n* `completed` -- some integer of completed parts\r\n* `account_id` -- the current account ID, used to resume interrupted uploads\r\n* `session_id` -- the current session ID, used to resume interrupted uploads\r\n* `offset` -- the offset of completed parts, used to resume interrupted uploads\r\n\r\nCompletion states can be committed to disk and then passed into resumeMultipart to resume uploads that were interrupted by server crashes.\r\n\r\nThe `MultipartUpload` also exposes the following methods:\r\n<!-- * `pause()` -- pauses the transfer -->\r\n<!-- * `resume()` -- resumes the transfer -->\r\n* `abort()` -- aborts the transfer\r\n***\r\n\r\n### files.resumeMultipart()\r\n**Parameters:** `options`\r\n\r\n`options` is a completion state, with at least keys:\r\n* `account_id` -- the account ID to resume\r\n* `session_id` -- the session ID to resume\r\n* `offset` -- the current session offset\r\n\r\nThis method returns a `MultipartUpload` which behaves exactly as if constructed in a standard upload.\r\n\r\n### files.stopMultipart()\r\n**Parameters:** `options`\r\n\r\n`options` is an options object with keys:\r\n* `account_id` -- the ID of the account with a session to abort\r\n* `session_id` -- the ID of the session to abort\r\nAborts the specified multipart upload session to prevent storage leaks.\r\n***\r\n\r\n### files.get()\r\n**Required params:** ```account_id, file_id```\r\nGets metadata for the file. **Not for downloading. If you want to download, use** ```contents()```**.**\r\n***\r\n### files.delete()\r\n**Required params:** ```account_id, file_id```\r\n***\r\n### files.move()\r\n**Required params:** ```account_id, file_id, parent_id```\r\n\"parent_id\" should be the ID of the folder you wish to move the file to.\r\n***\r\n### files.rename()\r\n**Required params:** ```account_id, file_id, name```\r\nThis is a vanity method, files can also be renamed using the ```move()``` method by including the desired \"name\" parameter.\r\n***\r\n### files.contents()\r\n**Required params:** ```account_id, file_id```\r\nReturns a FileStream. See code example for ```files.contents()``` above. Example also in test.js.\r\n***\r\n\r\n### folders.create()\r\n**Required params:** ```account_id, folder_id, name```\r\n***\r\n### folders.get()\r\n**Required params:** ```account_id, folder_id```\r\n***\r\n### folders.delete()\r\n**Required params:** ```account_id, folder_id```\r\n***\r\n### folders.move()\r\n**Required params:** ```account_id, folder_id, parent_id```\r\n***\r\n### folders.rename()\r\n**Required params:** ```account_id, folder_id, name```\r\nThis is a vanity function just like ```files.rename()```. ```folders.move()``` can be used to rename as well.\r\n***\r\n### folders.contents()\r\n**Required params:** ```account_id, folder_id```\r\n***\r\n\r\n### links.base()\r\n**Required params:** ```account_id```\r\n***\r\n### links.create()\r\n**Required params:** ```account_id, file_id```\r\n\"file_id\" should be the file you want to link to.\r\n***\r\n### links.get()\r\n**Required params:** ```account_id, link_id```\r\n***\r\n### links.update()\r\n**Required params:** ```account_id, link_id```\r\nOptional parameters:\r\n\"active\": enables the link if true, disables the link if false.\r\n\"password\": set a password for the link.\r\n\"expiration\": set an expiration date for the link. Can be an instance of Date() or a number (in milliseconds).\r\n***\r\n### links.delete()\r\n**Required params:** ```account_id, link_id```\r\n\r\n## Testing\r\n\r\n`API_KEY=<api key> node index.js`\r\n\r\nSome other env vars that may be useful are:\r\n\r\n* TEST_ACCOUNT_ID\r\n* API_HOST\r\n* API_CA\r\n* TEST_ACCOUNT_FOLDER (multipart.js only)\r\n\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/kloudless/kloudless-node/issues"
  },
  "homepage": "https://github.com/kloudless/kloudless-node",
  "_id": "kloudless@0.0.1",
  "_shasum": "8b442ac00db7ca145211c4aeadc6cb1272976032",
  "_resolved": "git://github.com/Kloudless/kloudless-node#f3897268d61d144ffed208ca93d603628d08152e",
  "_from": "git://github.com/Kloudless/kloudless-node"
}
